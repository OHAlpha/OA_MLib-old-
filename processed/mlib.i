struct bitArray {
 char *arr;
 int offset;
 int length;
 int size;
};
struct charArray {
 char *arr;
 int size;
};
struct decimal {
 int length;
 int size;
 int *integer;
};
struct integer {
 int length;
 int size;
 char *integer;
};
struct PrimeFactorSeries {
  unsigned int n;
  unsigned long long int *factors;
};
struct PrimeFactorProduct {
  unsigned int n;
  unsigned long long int *factors;
  unsigned long long int *powers;
};
struct CTriple {
  char a, b, gcd;
};
struct STriple {
  short int a, b, gcd;
};
struct USTriple {
  unsigned short int a, b, gcd;
};
struct ITriple {
  int a, b, gcd;
};
struct UITriple {
  unsigned int a, b, gcd;
};
struct LTriple {
  long int a, b, gcd;
};
struct ULTriple {
  unsigned long int a, b, gcd;
};
struct LLTriple {
  long long int a, b, gcd;
};
struct ULLTriple {
  unsigned long long int a, b, gcd;
};
extern char hexi[], Hexi[];
extern int rightMask[], leftMask[];
extern unsigned int numPrimes;
extern unsigned long long int primelist[];
char chooseC( char n, char k );
short int chooseS( short int n, short int k );
unsigned short int chooseUS( unsigned short int n, unsigned short int k );
int chooseI( int n, int k );
unsigned int chooseUI( unsigned int n, unsigned int k );
long int chooseL( long int n, long int k );
unsigned long int chooseUL( unsigned long int n, unsigned long int k );
long long int chooseLL( long long int n, long long int k );
unsigned long long int chooseULL( unsigned long long int n, unsigned long long int k );
float chooseF( int n, int k );
double chooseD( long int n, long int k );
long double chooseLD( long long int n, long long int k );
struct CTriple eulerC( char m, char n );
struct STriple eulerS( short int m, short int n );
struct USTriple eulerUS( unsigned short int m, unsigned short int n );
struct ITriple eulerI( int m, int n );
struct UITriple eulerUI( unsigned int m, unsigned int n );
struct LTriple eulerL( long int m, long int n );
struct ULTriple eulerUL( unsigned long int m, unsigned long int n );
struct LLTriple eulerLL( long long int m, long long int n );
struct ULLTriple eulerULL( unsigned long long int m, unsigned long long int n );
char factC( char n );
short int factS( short int n );
unsigned short int factUS( unsigned short int n );
int factI( int n );
unsigned int factUI( unsigned int n );
long int factL( long int n );
unsigned long int factUL( unsigned long int n );
long long int factLL( long long int n );
unsigned long long int factULL( unsigned long long int n );
float factF( int n );
double factD( long int n );
long double factLD( long long int n );
char gcdC( char m, char n );
short int gcdS( short int m, short int n );
unsigned short int gcdUS( unsigned short int m, unsigned short int n );
int gcdI( int m, int n );
unsigned int gcdUI( unsigned int m, unsigned int n );
long int gcdL( long int m, long int n );
unsigned long int gcdUL( unsigned long int m, unsigned long int n );
long long int gcdLL( long long int m, long long int n );
unsigned long long int gcdULL( unsigned long long int m, unsigned long long int n );
float gcdF( float m, float n );
double gcdD( double m, double n );
long double gcdLD( long double m, long double n );
float ifactF( int n );
double ifactD( long int n );
long double ifactLD( long long int n );
char ipowC( char b, char e );
short int ipowS( short int b, short int e );
unsigned short int ipowUS( unsigned short int b, unsigned short int e );
int ipowI( int b, int e );
unsigned int ipowUI( unsigned int b, unsigned int e );
long int ipowL( long int b, long int e );
unsigned long int ipowUL( unsigned long int b, unsigned long int e );
long long int ipowLL( long long int b, long long int e );
unsigned long long int ipowULL( unsigned long long int b, unsigned long long int e );
float ipowF( float b, int e );
double ipowD( double b, long int e );
long double ipowLD( long double b, long long int e );
char lcmC( char m, char n );
short int lcmS( short int m, short int n );
unsigned short int lcmUS( unsigned short int m, unsigned short int n );
int lcmI( int m, int n );
unsigned int lcmUI( unsigned int m, unsigned int n );
long int lcmL( long int m, long int n );
unsigned long int lcmUL( unsigned long int m, unsigned long int n );
long long int lcmLL( long long int m, long long int n );
unsigned long long int lcmULL( unsigned long long int m, unsigned long long int n );
float lcmF( float m, float n );
double lcmD( double m, double n );
long double lcmLD( long double m, long double n );
char permuteC( char n, char k );
short int permuteS( short int n, short int k );
unsigned short int permuteUS( unsigned short int n, unsigned short int k );
int permuteI( int n, int k );
unsigned int permuteUI( unsigned int n, unsigned int k );
long int permuteL( long int n, long int k );
unsigned long int permuteUL( unsigned long int n, unsigned long int k );
long long int permuteLL( long long int n, long long int k );
unsigned long long int permuteULL( unsigned long long int n, unsigned long long int k );
float permuteF( int n, int k );
double permuteD( long int n, long int k );
long double permuteLD( long long int n, long long int k );
unsigned int primes( unsigned long long int *arr, unsigned long long int limit,
        unsigned int n );
unsigned int primesCont( unsigned long long int *arr, unsigned long long int limit,
        unsigned int i, unsigned int n );
struct PrimeFactorSeries factorS( unsigned long long int );
struct PrimeFactorProduct factorP( unsigned long long int );
unsigned int numPrimesLess( unsigned long long int );
struct PrimeFactorSeries primesLess( unsigned long long int );
void copyCharArray( struct charArray *source, struct charArray *dest, int flags );
void rotateRightBytesCharArray( struct charArray arr, int s );
void rotateLeftBytesCharArray( struct charArray arr, int s );
void rotateRightCharArray( struct charArray arr, int s );
void rotateLeftCharArray( struct charArray arr, int s );
void shiftRightBytesCharArray( struct charArray arr, int s );
void shiftLeftBytesCharArray( struct charArray arr, int s );
void shiftRightCharArray( struct charArray arr, int s );
void shiftLeftCharArray( struct charArray arr, int s );
void writeBinaryStringCharArray( char * str, struct charArray arr );
char * getBinaryStringCharArray( struct charArray arr );
void printBinaryStringCharArray( struct charArray arr );
void writeHexiDecimalStringCharArray( char * str, struct charArray arr );
char * getHexiDecimalStringCharArray( struct charArray arr );
void printHexiDecimalStringCharArray( struct charArray arr );
void writeOctalStringCharArray( char * str, struct charArray arr );
char * getOctalStringCharArray( struct charArray arr );
void printOctalStringCharArray( struct charArray arr );
void sAlignRightBitArray( struct bitarray arr, int s );
void sAlignLeftBitArray( struct bitarray arr, int o );
void rAlignRightBitArray( struct bitarray arr, int s );
void rAlignLeftBitArray( struct bitarray arr, int o );
void copyBitArray( struct bitArray *source, struct bitArray *dest, int flags );
void rotateRightBitArray( struct bitarray arr, int s );
void rotateLeftBitArray( struct bitarray arr, int s );
void shiftRightBitArray( struct bitarray arr, int s );
void shiftLeftBitArray( struct bitarray arr, int s );
void writeBinaryStringBitArray( char * str, struct bitArray arr );
char * getBinaryStringBitArray( struct bitArray arr );
void printBinaryStringBitArray( struct bitArray arr );
void writeHexiDecimalStringBitArray( char * str, struct bitArray arr );
char * getHexiDecimalStringBitArray( struct bitArray arr );
void printHexiDecimalStringBitArray( struct bitArray arr );
void writeOctalStringBitArray( char * str, struct bitArray arr );
char * getOctalStringBitArray( struct bitArray arr );
void printOctalStringBitArray( struct bitArray arr );
int cmpInteger( struct integer a, struct integer b );
int cmpLInteger( struct integer a, long long int b );
int cmpZInteger( struct integer num );
void copyInteger( struct integer *source, struct integer *dest, int flags );
void differenceInteger( struct integer a, struct integer b, struct integer *c );
void differenceEqualsInteger( struct integer *a, struct integer b );
void preIncrementInteger( struct integer *n );
void postIncrementInteger( struct integer *n );
void preDecrementInteger( struct integer *n );
void postDecrementInteger( struct integer *n );
void modInteger( struct integer a, struct integer b, struct integer *c );
void modEqualsInteger( struct integer *a, struct integer b );
void negateInteger( struct integer source, struct integer *dest );
void negateEqualsInteger( struct integer *num );
struct integer ZERO;
void productInteger( struct integer a, struct integer b, struct integer *c );
void productEqualsInteger( struct integer *a, struct integer b );
void longMultiplicationInteger( struct integer a, struct integer b, struct integer *c );
void longMultiplicationEqualsInteger( struct integer *a, struct integer b );
void toom3Integer( struct integer a, struct integer b, struct integer *c );
void toom3EqualsInteger( struct integer *a, struct integer b );
void quotientInteger( struct integer a, struct integer b, struct integer *c );
void quotientEqualsInteger( struct integer *a, struct integer b );
int power[9];
struct integer *readInteger( char * str );
int sizeInteger( struct integer num );
void sumInteger( struct integer a, struct integer b, struct integer *c );
void sumEqualsInteger( struct integer *a, struct integer b );
void writeInteger( char * str, struct integer arr );
char * strInteger( struct integer arr );
void printInteger( struct integer arr );
void differenceDecimal( struct decimal a, struct decimal b, struct decimal *c );
void differenceEqualsDecimal( struct decimal *a, struct decimal b );
int power[9];
struct decimal *readDecimal( char * str );
void sumDecimal( struct decimal a, struct decimal b, struct decimal *c );
void sumEqualsDecimal( struct decimal *a, struct decimal b );
void writeDecimal( char * str, struct decimal arr );
char * strDecimal( struct decimal arr );
void printDecimal( struct decimal arr );
